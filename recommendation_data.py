# -*- coding: utf-8 -*-
"""recommendation_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OhJNIgG0AUKW35Z70q004NullQY2Zc_e
"""

!pip install faker

import pandas as pd
import numpy as np
import random
from faker import Faker
from faker.providers import DynamicProvider
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

data = pd.read_csv('places.csv')
cities = list(set(data['City']))
places = list(set(data['Place']))

generated_cities, generated_ages, generated_categories = [], [], []
generated_gender, generated_Splace, generated_Dplace = [], [], []
generated_ratings, generated_click = [], []

city_names_provider = DynamicProvider("city_generation", elements=cities)
place_names_provider = DynamicProvider("place_generation", elements=places)
categories_names_provider = DynamicProvider(
    "category_generation", elements=['Natural', 'Historical', 'Religious', 'Architectural']
)

def generate_feedback_data():
    fake = Faker(['en_IN'])
    fake.add_provider(city_names_provider)
    fake.add_provider(place_names_provider)
    fake.add_provider(categories_names_provider)

    df_places = pd.read_csv('places.csv')

tf = TfidfVectorizer(analyzer='word', ngram_range=(1, 3), min_df=1, stop_words='english')
tfidf_matrix = tf.fit_transform(data['Place'])
cosine_similarities = linear_kernel(tfidf_matrix, tfidf_matrix)

results = {}
for idx, row in data.iterrows():
    similar_indices = cosine_similarities[idx].argsort()[:-100:-1]
    similar_items = [(cosine_similarities[idx][i], data['PlaceID'].iloc[i]) for i in similar_indices]
    results[idx] = similar_items[1:]

def item(id):
    return data.loc[data['PlaceID'] == id]['Place'].tolist()[0].split(' - ')[0]

def get_idx(id):
    return data[data['PlaceID'] == id].index.tolist()[0]

def recommend(item_id, num):
    output = {"Suggested": []}
    recs = results[get_idx(item_id)][:num]
    for rec in recs:
        place_name = item(rec[1])
        image_url = data.loc[data["Place"] == place_name]["ImageUrl"].tolist()
        output["Suggested"].append([place_name, image_url])
    return output

def generate_profile_data():
    fake = Faker(['en_IN'])
    fake.add_provider(city_names_provider)
    fake.add_provider(categories_names_provider)

    for _ in range(150):
        generated_cities.append(fake.city_generation())
        generated_ages.append(random.randint(10, 65))
        generated_categories.append(fake.category_generation())
        generated_gender.append(random.choice(["Male", "Female"]))

    df = pd.DataFrame({
        'City': generated_cities, 'Category': generated_categories,
        'Age': generated_ages, 'Gender': generated_gender
    })

    df.to_csv('profile_data.csv')

def generate_feedback_data():
    fake = Faker(['en_IN'])
    fake.add_provider(city_names_provider)
    fake.add_provider(place_names_provider)
    fake.add_provider(categories_names_provider)

    df_places = pd.read_csv('places.csv')

    generated_cities, generated_Splace, generated_Dplace = [], [], []
    generated_ages, generated_categories, generated_gender, generated_ratings = [], [], [], []

    for _ in range(150):
        city = fake.city_generation()
        age = random.randint(10, 65)
        category = fake.category_generation()
        gender = random.choice(["Male", "Female"])
        rating = random.randint(1, 5)

        Splace = fake.place_generation()

        if Splace in df_places['Place'].values:
            id = df_places[df_places['Place'] == Splace].values[0]
            place2 = recommend(id[3], num=1)

            if 'Suggested' in place2 and place2['Suggested']:
                Dplace = place2['Suggested'][0][0]

                generated_cities.append(city)
                generated_Splace.append(Splace)
                generated_Dplace.append(Dplace)
                generated_ages.append(age)
                generated_categories.append(category)
                generated_gender.append(gender)
                generated_ratings.append(rating)

    min_length = min(len(generated_cities), len(generated_Splace), len(generated_Dplace),
                     len(generated_ages), len(generated_categories), len(generated_gender), len(generated_ratings))

    generated_cities = generated_cities[:min_length]
    generated_Splace = generated_Splace[:min_length]
    generated_Dplace = generated_Dplace[:min_length]
    generated_ages = generated_ages[:min_length]
    generated_categories = generated_categories[:min_length]
    generated_gender = generated_gender[:min_length]
    generated_ratings = generated_ratings[:min_length]

    df = pd.DataFrame({
        'City': generated_cities, 'SPlace': generated_Splace, 'DPlace': generated_Dplace,
        'Category': generated_categories, 'Age': generated_ages,
        'Gender': generated_gender, 'Rating': generated_ratings
    })

    df.to_csv('feedback_data.csv', index=False)

for _ in range(150):
    generated_click.append(random.choice([0, 1]))

df = pd.read_csv('feedback_data_new.csv')
df['btnClick'] = generated_click
df.to_csv('final_feedback.csv', index=False)

generate_profile_data()
generate_feedback_data()